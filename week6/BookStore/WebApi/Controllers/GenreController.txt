using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using WebApi.DBOperations;
using WebApi.BookOperations.GetBooks;
using WebApi.BookOperations.CreateBook;
using static WebApi.BookOperations.CreateBook.CreateBookCommand;
using System;

namespace WebApi.AddControllers
{
    [ApiController]
    [Route("[controller]s")]
    public class GenreController : ControllerBase
    {

        private readonly ApplicationDbContext _context;

        public GenreController(ApplicationDbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public IActionResult GetBooks()
        {
            GetGenresQuery query = new GetBooksQuery(_context);
            var result = query.Handle();
            return Ok(result);
        }

        [HttpGet("{id}")]
        public Genre GetById(int id)
        {
            var genre = _context.Genres.Where(genre => genre.Id == id).SingleOrDefault();
            return genre;
        }

        //Post
        [HttpPost]
        public IActionResult AddBook([FromBody] CreateBookModel newBook)
        {
            CreateBookCommand command = new CreateBookCommand(_context);

            try
            {
                command.Model = newBook;
                command.Handle();
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }

            return Ok();
        }

        //Put
        [HttpPut("{id}")]
        public IActionResult UpdateBook(int id, [FromBody] Book updatedGenre)
        {
            var genre = _context.Genres.SingleOrDefault(x => x.Id == id);

            if (genre == null)
                return BadRequest();

            genre.GenreId = updatedGenre.GenreId != default ? updatedGenre.GenreId : genre.GenreId;
            genre.PageCount = updatedGenre.PageCount != default ? updatedGenre.PageCount : genre.PageCount;
            genre.PublishDate = updatedGenre.PublishDate != default ? updatedGenre.PublishDate : genre.PublishDate;
            genre.Title = updatedGenre.Title != default ? updatedGenre.Title : genre.Title;

            _context.SaveChanges();
            return Ok();    
        }

        [HttpDelete("{id}")]
        public IActionResult DeleteBook(int id)
        {
            var book = _context.Books.SingleOrDefault(x => x.Id == id);
            if (book == null)
                return BadRequest();

            _context.Books.Remove(book);
            _context.SaveChanges();
            return Ok();
        }
    }
}